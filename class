成员函数
    定义成员函数时，使用作用域解析运算符（::）来标识函数所属的类；
    void Stock::update(double price)//定义的update()函数是Stock类的成员
    类方法可以访问类的private组件。
内联方法
    定义位于类声明中的函数都将自动成为内联函数。
什么是接口？
    接口是一个共享框架，供两个系统（如用户和计算机之间）交互使使用；
    接口让程序员能够编写与类对象交互得代码


构造函数
    如果程序中没有提供任何构造函数，则编译器会为程序定义一个默认构造函数；否则，必须自己提供默认构造函数。
    
    默认构造函数
    Stock::Stock()
    {
        company = "no name";
        shares = 0;
        share_val = 0.0;
        total_val = 0.0;
    }
    
    
初始化列表
class Cstu
{
    public:
    int a;
    double f;
    Cstu() : a(12), f(12.2f)//成员的初始化顺序只与声明顺序有关，跟初始化列表的书写顺序无关
    {
    
    }
}

析构函数
    不带参数（没有重载），只有一个
    ~Stock();


常函数
    形式：void  fun() const {;}
    构造和析构 不可以是常函数
    可以使用数据成员，不能修改数据成员
	常函数的this指针是 const CStu*
    常对象只能调用常函数，不能调用普通函数
    
    
声明对象
    Stock fitst;    //calls default constructor implicitly隐式调用默认构造函数
    Stock first = Stock();  //calls it explicitly
    Stock *prelief = new Stock; //calls it implicitly
    malloc和free不会调用构造函数和析构函数
    对于没被初始化的对象，程序使用默认构造函数来创建。
  
临时对象
    结构：类型+()
    作业域：所在语句
    Stock("Nifty food", 10, 50);
    临时变量
    int(12);
    int b = int(12);//int b = 12;
    
this指针
    所有的类方法都将this指针设置为调用它的对象的地址
    对象创建时才有，不是成员
    作用域是在类内部
    
C++允许在类里声明常量，但不允许对它进行赋值
    有一种方法——使用关键字static
    static const int Months = 23;
    
    
基类和子类
    class SubClass : public SuperClass
    {
        
    }
