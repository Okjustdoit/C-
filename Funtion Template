函数模板实际上就是一个通用函数
 1、函数定义时不指定具体的数据类型（使用虚拟类型代替）
 2、函数被调用时编译器根据实参反推数据类型—类型的参数啊

函数声明
template<typename T> void swap(T&, T&);

函数定义（定义参数时记得赋初值）
template<typename T>
void swap(T &a, T &b)
{
 
}

模板重载
template <typename T>
void swap(T &a, T &b);
//传递数组
template <typename T>
void swap(T *a, T *b, int n);

具体化
 1、显示具体化（explicit specialization）
  template <> void swap<job>(job &, job &);//swap<job>中的<job>是可选的
 2.隐式实例化（模板）
  模板并非函数定义，但使用int的模板实例是函数定义。
  template<typename T> void swap(T&, T&);
 3、显示实例化
  template void swap<int>(int, int);
