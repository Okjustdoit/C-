attation
	引用必须初始化，不可以引用常量
	s函数中的局部变量会被内存回收
		s所谓内存回收，并不是把内存保存的设置清零，而是指内存中你的程序申请的这块内存已经不是你的了	
	s传递数组只能使用指针，并使用const关键字
	s数据对象是类对象时，要求使用引用
int int_value = 32;

//refValue指向int_value,是int_value的另一个名字
int& refValue = int_value;

指向常量引用(const)
const double& d = 12.5;

引用和指针的关系
引用对指针进行了简单封装，底层任然是指针
获取引用地址是，编译器会进行内部转换
//////////////////////////////////////////////
#include <iostream>

using namespace std;

void change(int &num)//引用
{
	num++;
}

int main()
{
	int num = 10;
	change(num);
	cout << "num = " << num << endl;//num = 11

	getchar();
}
////////////////////////////////////////////////////////////
左值是什么？
	1左值参数是可被引用的数据对象，如，变量、数组元素、结构成员、引用和解除引用的指针。
	2非左值：字面常量（用引号括起来的字符串除外，他们由其地址表示）和包含多项的表达式。
	3常规变量和const变量都可视为左值
右值引用
	1使用&&声明
	double && rref = std::sqrt(36.00);   
	double j = 15.0;
	double && jref = 2.0 * j + 18.5;
注意：如果函数调用的参数不是左值或与相应的const引用参数的类型不匹配，则C++将创建类型正确的匿名变量，
	将函数调用的参数的值传递给该匿名变量，并让参数来引用该变量。


引用和类对象
	const string & version2(string & s1, const string & s2);
引用和对象
	void file_it(ostream & os, double fo, const double fe[], int n);
